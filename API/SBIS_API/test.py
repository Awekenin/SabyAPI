# ______print________
# sep='' - разделитель
# end='' - устанавливает конец для самой строки
# print ("значение \' тут") - вывести в значение \' в строке
# + - сложение строк в print
# min - минимальное значение
# max - максимальное значение
# abs - находит значение по модулю
# pow(5, 3) - возведение в степень = 125
# round - округляет в ближайшему числу (большему или меньшему)
# += 1 - приваить один
# // - делением со статком целого числа (в меньшую сторону)
# ** - возведение в степень
# != - проверка на истину
# ______Вводимые типы значений
# input - ввод значения
# int(input()) - ввести целое число
# str(input()) - ввести строчное значение
# float(input()) - ввести не целое значние
# ______Условия
# if - если if not
# elif - иначе то
# else - иначе
# and - и / or - или
# i = 5 if data == 'Five' else 0 - тернарная переменная
# ______Циклы_______
# for in - цикл
# while i < 15: - цикл
# range - указать диапазон например в цикле
# break - выход из цикла
# continue - пропускает итерацию
# _______Массивы______
# [:::] - элемент в массиве: до какого: шаг.
# _______Добавление в маасив__________
# .append - добавить в список (массив) значение следующий по списку
# .insert(1,"word") - добавить в конкертное место списка добавить значение, со смещением вправо
# .extend([5, 6, 9]) - добавить в массив в списко
# _______Сортировка__________
# .sort - сортировка по увелечению
# .reverse - переворачивает список
# .pop - удаляет последний элемент в спике (можно передавать элемент)
# .remove() - удаляет значение и из списка по значению
# .clear - удаляет весь список
# .count - подсчитывает значения в списке
# len() - размер списка (массива)
# _______Маасив в массиве_____
# word = [0, [1,2]]
# print(word[1][0])
# _________Работа с массивом______
# capitalize - первый смивол с большой буквы с массиве

# _________Картежи____
# Используются для передачи данных - нельзя имзенить
# data = (9,) - картеж, может сущиствовать без скобок, в него нельзя записать
# counte - картеж можно посчитать
# lan - размер списка
# tuple() - из списка в картеж
# _________Словарь________
# = {ключ: значение,} - словарь
# = dict(code='',) - тот же словарь только через dict, можно использовать только строки
# .items() - выводит словарь как картеж (ключи и значение)
# for key, value in X.items()
# .get - метот get тот же самый способ как и []
# .clear - отчисляет словарь
# .pop - удаляет элемент
# .popitem - удаляет последний элемент
# .keys - только ключи
# .values -только значение
# X[''] = '' - перезаписать значение
# ________множестов____
# те же списки - но там не могут быть повторяющиеся элементы
# = set('') - множество
# = {значение, значение,} - множество - нельзя обратиться к какому либо значению
# но можено удалять и добавлять
# .appdate() - добавить значение
# .remove() - удаление значение
# .pop() - удаляет первый элемент
# .clear - очистить всё множество
# .frozenset - замороженное множество - его нельзя изменять
# _________Функции_________
# def Х(): - указываем функцию
#     pass - ничего
# return - возвращяет из функции
# Х = lambda x, y: x * y - анонимная фукнция
# _________Работа с файлами
# x.open(r, a, w) - чтение, добавление, запись
# x.clouse - закрыть файл
# _________Обработчик ошибок
# try: - какоей действие вызываем, в котором хотим отловить ошибку
# except ошибка: - что делать при отлове данной ошибки, после него можно добать else
# finally: - выполняется после всех обработчкиов
# _________Менеджер для работы с файлами
# with open('text.txt', 'r', encoding='utf-8') as file: - сам отркыват и сам закрывает файл
# _________Добавление библиотек
# import - импортируем библиотеку
# import MODUL as NewName
# from  import - импортируем какой либо метод из библиотеки

# word = "Hello, main, gold"
# words_arr = word.split(', ')
# for i in range(len(words_arr)):
#     words_arr[i] = words_arr[i].capitalize()
#     print(words_arr)
# result = ', '.join(words_arr)
# print(result)
#import sql


#Python 3.10.4

string_words = '';
serch_word = '';

srting_words = input('Введите строку: ');
serch_word = input('Введите искомое слово: ');

words_arr = srting_words.split(' ')
count = 0;

slovo = srting_words.find(srting_words)
print('index: ', slovo)

for i in range(len(words_arr)):
    if words_arr[i].lower() == serch_word:
        print('Позиция в массиве: ',i);
        break;
    else:
        count += 1;
    if count == len(words_arr):
        print ('лож');


input('Нажмите Enter')


https://www.youtube.com/watch?v=Nsh4sfaf9QY&ab_channel=ITCommunity
хараткр python

Мултипарадигменный язык программирования
Интропретируемый - медленный, код компелирует в байт-код и после этого уже интропретируется

Строгой динамической неявной типизацией
Строгая - не позволяет смешивать в выражениях различные типы и не выполняет автоматические неявные преобразования, например нельзя вычесть из строки множество.
Динамическая - В динамической типизации все типы выясняются уже во время выполнения программы.
Неявная - задание типа новых переменных / функций / их аргументов эту задачу выполняет компилятор / интерпретатор.

ТИПЫ ДАННЫХ
Numbers (числа)
Strings (строки)
Lists (списки)
Dictionaries (словари)
Tuples (кортежи)
Sets (множества)
Boolean (логический тип данных)

Эти типы данных можно, в свою очередь, классифицировать по нескольким признакам:
изменяемые (списки, словари и множества) - меняет значение в ячейки памяти
неизменяемые (числа, строки и кортежи) - могут быть ключом а так же магическая функция hash
упорядоченные (списки, кортежи, строки и словари)
неупорядоченные (множества)

Область видимости (локальные нелокальные глобальные билты)
Билты - встроенные функции
Локальные - тело самой функции
Не локальные - уровень выше (замыкание)
Глобальные - где написана функция (модуль)

args kwargs

Декаратор - навешиваем функцию на другие функции (декларировать классы можно)
Встроеная область видимости - зарезервированные слова
Замыкание python - Замыкание (closure) — функция, которая находится внутри другой функции и ссылается на переменные объявленные в теле внешней функции (свободные переменные). Внутренняя функция создается каждый раз во время выполнения внешней.

Класс/объект

__init__ - иницилизатор и __new__ - конструктор
__new__ - запускается первей чем __init__
__hash__ - зачение объекта - hash таблицы

Виды функций
def и lambda


* ** - распаковка параметров
списковые отключени
Ассинхронная работа
Декораторы

Концепкции калассов: Наследование, полиморфиз, инкапсуляция, абстрагирование

Магический метод - системная логика

МетодРезолюшенОрдер - алгоритм поиска атрибутов при наследовании

Виды наследования

класс метод и статик метод - без инициализации объекта

Контекстный менеджер

Итератор и генератор

питон не умеет с памятью

хэш - это способ работы с памятью

фрейморки джанго, flask

Нормализация базы данных

400 - ошибка клиента 500 - ошибка сервера
200 - окей 300 - тридерект 100 - информационные

идепотентность

POST, GET, DELETE, PUT, Option, puch, headers

DOCER

Celery